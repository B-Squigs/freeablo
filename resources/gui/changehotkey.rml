<rml>
    <head>
        <style>
            body
            {
                font-family: FreeMono;
                font-size: 24;
                text-align: center;
                background-color: rgba(0,0,0,255);
                height: 100%;
                width: 100%;
                #height: 25%;
                #width: 25%;
                #left: 37%;
                #top: 37%;
            }

            div#topContainer
            {
                position:absolute;
                top: 50%;
            }

            div#menuContainer
            {
                position: absolute;
                top: -50px;
            }

        </style>

        <script>
import time
import rocket
import freeablo
import hotkey
from menu import Menu

context = rocket.contexts['default']
rk = rocket.key_identifier
doc = None
modifiers = [rk.RSHIFT, rk.LSHIFT,
             rk.RCONTROL, rk.LCONTROL,
             rk.RMENU, rk.LMENU,
             rk.RWIN, rk.LWIN, 175]
             
newHotkey = hotkey.Hotkey()

def onLoad(document):
    document.id = "changehotkey"
    global doc
    doc = document
    doc.func = ""
    container = document.GetElementById('innerMenuContainer')
    container.inner_rml = '<span id="menuEntry0"></span><br/>'
    elem = container
    elem.inner_rml = "Press A Key"
 
def onKeyDown(event, document):    
    global newHotkey
    global doc
    global modifiers
    global rk
    
    if event.parameters['key_identifier'] == rk.ESCAPE:
        doc.Close()
        hotkeymenu = context.LoadDocument('resources/gui/hotkeymenu.rml')
        hotkeymenu.Show()
        return
    
    if event.parameters['key_identifier'] in [rk.CAPITAL, rk.NUMLOCK, rk.SCROLL, rk.PAUSE, rk.RETURN, rk.NUMPADENTER]:
        return

    oldHotkeys = freeablo.getHotkeys()
    if event.parameters['key_identifier'] in modifiers:
        if event.parameters['key_identifier'] == modifiers[0] or \
           event.parameters['key_identifier'] == modifiers[1]:
                newHotkey.shift = True
        if event.parameters['key_identifier'] == modifiers[2] or \
           event.parameters['key_identifier'] == modifiers[3]:
                newHotkey.ctrl = True
        if event.parameters['key_identifier'] == modifiers[4] or \
           event.parameters['key_identifier'] == modifiers[5]:
                newHotkey.alt = True
        if event.parameters['key_identifier'] == modifiers[6] or \
           event.parameters['key_identifier'] == modifiers[7] or \
           event.parameters['key_identifier'] == modifiers[8]:
                return
    else:
        newHotkey.key = event.parameters['key_identifier']
        
        for oldHotkey in oldHotkeys:
            if oldHotkey == newHotkey:
                    errormsg = context.LoadDocument('resources/gui/changehotkeyerrormsg.rml')
                    errormsg.Show()
                    return 

        doc.func = doc.func[1:-1] if doc.func[0] == "'" else doc.func
        freeablo.setHotkey(doc.func, [newHotkey.key, newHotkey.shift, newHotkey.ctrl, newHotkey.alt]) 
        newHotkey = None
        doc.Close()
        hotkeymenu = context.LoadDocument('resources/gui/hotkeymenu.rml')
        hotkeymenu.Show()

def onKeyUp(event, document):
    global newHotkey
    global modifiers

    if event.parameters['key_identifier'] in modifiers:
        if event.parameters['key_identifier'] == modifiers[0] or \
           event.parameters['key_identifier'] == modifiers[1]:
                newHotkey.shift = False
        if event.parameters['key_identifier'] == modifiers[2] or \
           event.parameters['key_identifier'] == modifiers[3]:
                newHotkey.ctrl = False
        if event.parameters['key_identifier'] == modifiers[4] or \
           event.parameters['key_identifier'] == modifiers[5]:
                newHotkey.alt = False

def showHotkeys():
    global doc
    doc.Close()

        </script>
    </head>

    <body onkeydown="onKeyDown(event, document)"
          onkeyup="onKeyUp(event, document)"
           onload="onLoad(document)">
        <div id="topContainer">
            <div id="menuContainer">
                <span id="smlogo"></span> <br/>
                
                <div id="innerMenuContainer"></div> 
            </div>
        </div>
    </body>
</rml>
